#!/bin/zsh
# shortcut to this dotfiles path is $DOTFILES
export DOTFILES="$HOME/.dotfiles"
export EDITOR='vim'
export VEDITOR='code'
export PATH="$PATH:$DOTFILES/bin:$HOME/.bin"

[ "${OSTYPE#*darwin}" = "$OSTYPE" ] && is_mac_os=false || is_mac_os=true

source $DOTFILES/lib/io_handlers.sh

HISTFILE=~/.zsh_history
HISTSIZE=1000000000
SAVEHIST=1000000000

zsh_files=($DOTFILES/zsh/*.zsh)

log_info 'Configuring Completions'

# Basic auto/tab complete:
autoload -U compinit
zmodload zsh/complist
compinit
_comp_options+=(globdots)

zstyle ':completion:*' completer _oldlist _expand _complete _match _ignored _approximate # forces zsh to realize new commands
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # matches case insensitive for lowercase
zstyle ':completion:*' insert-tab pending # pasting with tabs doesn't perform completion
zstyle ':completion:*' rehash true # rehash if command not found (possibly recently installed)
zstyle ':completion:*' menu select=2 # menu if nb items > 2

log_info 'Loading completion files'

# load everything but the path and completion files
for file in ${${zsh_files:#*/path.zsh}:#*/completion.zsh}; do
  source "$file"
done	# Include hidden files.

unset zsh_files updated_at

if [ is_mac_os ]; then
	log_info 'Configuring homebrew for MacOS'
	source $DOTFILES/homebrew/config.sh
fi

log_info 'Setting up fuzzy search'

# search history with fzf if installed, default otherwise
if command -v fzf > /dev/null; then
	if [ is_mac_os ]; then
		. $HOME/.fzf.zsh
	else
		. /usr/share/fzf/key-bindings.zsh
	fi
else
	bindkey '^R' history-incremental-search-backward
fi

log_info 'Loading .localrc configuration'

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
# shellcheck disable=SC1090
[ -f ~/.localrc ] && . ~/.localrc

if command -v rbenv > /dev/null; then
	if [ is_mac_os ]; then
		export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
	fi

	eval "$(rbenv init -)"
fi

# if has nvm installed, use it when entering node project
if command -v node > /dev/null; then
	log_info 'Configuring NVM'
	source $DOTFILES/frameworks/nvm_init.sh
fi

log_info 'Configuring Starship for prompt'
export STARSHIP_CONFIG="$DOTFILES/zsh/starship/starship.toml"
export STARSHIP_CACHE="$DOTFILES/zsh/starship/cache"
eval "$(starship init zsh)"

log_info 'Loading Znap'
zstyle ':znap:*' plugins-dir $DOTFILES/zsh/znap
source $DOTFILES/zsh/znap/zsh-snap/znap.zsh

export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
znap source zsh-users/zsh-completions
znap source zsh-users/zsh-syntax-highlighting
znap source zsh-users/zsh-autosuggestions

log_success 'Good to go!'
